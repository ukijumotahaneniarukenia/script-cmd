#!/usr/bin/env python3

from lxml import etree
import lxml.html

import sys

import os

import re


def usage():
    filename = re.sub(".*/", "", __file__)
    usage = """
Usage:

  CMD: echo test-remove-comment.html | {filename}

  or

  CMD: echo test-remove-comment.html --debug | {filename}

""".format(filename=filename)

    print(usage)
    sys.exit(0)


is_debug = 0


def debug_log(msg):
    if is_debug:
        print(msg)


# https://docs.python.org/ja/3/library/xml.etree.elementtree.html

def NNN(html, target_element, prev_target_element_tag, prev_xpath, xpath_list):
    print(xpath_list[-1])

    if etree.iselement(target_element) and not len(target_element.getchildren()) == 0:

        target_children_list = target_element.getchildren()

        target_children_cnt = len(target_children_list)

        for target_idx in range(0, target_children_cnt):

            target_element_tag = target_children_list[target_idx].tag

            if target_element.tag == 'html':
                # 初回
                debug_log("初回")

                debug_log(
                    prev_target_element_tag + '\t' + target_element_tag + '\t' + str(target_idx) + '\t' + prev_xpath)

                current_xpath = prev_xpath + '/' + target_element_tag

                xpath_list.append(current_xpath)

                # ここで何を状態管理して変更するか考える
                debug_log('=' * 40 + "a" * 10 + '=' * 40)
                debug_log("current_element".ljust(30) + ':' + html.xpath(prev_xpath + '/' + target_element_tag)[0].tag)
                debug_log("prev_target_element_tag".ljust(30) + ':' + prev_target_element_tag)
                debug_log("current_xpath".ljust(30) + ':' + current_xpath)
                debug_log("prev_xpath".ljust(30) + ':' + prev_xpath)
                debug_log("xpath_list".ljust(30) + ':' + ','.join(xpath_list))

                NNN(html, html.xpath(current_xpath)[0], html.xpath(prev_xpath)[0].tag,
                    current_xpath, xpath_list)

            else:
                # ２回目以降
                debug_log("２回目以降")

                debug_log(
                    prev_target_element_tag + '\t' + target_element_tag + '\t' + str(target_idx) + '\t' + xpath_list[
                        -1])

                # ここに同一階層の同一タグを管理する
                same_hierarchy_list = html.xpath(xpath_list[-1] + '/' + target_element_tag)

                # print('same_hierarchy_list :' + str(len(same_hierarchy_list)))

                if len(same_hierarchy_list) > 1:

                    for idx in range(0, len(same_hierarchy_list)):
                        debug_log('=' * 40 + "b" * 10 + '=' * 40)
                        current_xpath = prev_xpath + '/' + target_element_tag + '[' + str(idx + 1) + ']'

                        # ここで何を状態管理して変更するか考える
                        debug_log('=' * 40 + "c" * 10 + '=' * 40)
                        # debug_log("current_element".ljust(30) + ':' + html.xpath(current_xpath)[0].tag)
                        debug_log("prev_target_element_tag".ljust(30) + ':' + prev_target_element_tag)
                        debug_log("current_xpath".ljust(30) + ':' + current_xpath)
                        debug_log("prev_xpath".ljust(30) + ':' + xpath_list[-1])
                        debug_log("xpath_list".ljust(30) + ':' + ','.join(xpath_list))

                        xpath_list.append(current_xpath)

                        NNN(html, html.xpath(current_xpath)[0], html.xpath(xpath_list[-1])[0].tag,
                            current_xpath, xpath_list)

                elif len(same_hierarchy_list) == 1:

                    debug_log('=' * 40 + "d" * 10 + '=' * 40)
                    current_xpath = xpath_list[-1] + '/' + target_element_tag

                    debug_log("current_element".ljust(30) + ':' + html.xpath(current_xpath)[0].tag)
                    debug_log("prev_target_element_tag".ljust(30) + ':' + prev_target_element_tag)
                    debug_log("current_xpath".ljust(30) + ':' + current_xpath)
                    debug_log("prev_xpath".ljust(30) + ':' + xpath_list[-1])
                    debug_log("xpath_list".ljust(30) + ':' + ','.join(xpath_list))

                    xpath_list.append(current_xpath)

                    NNN(html, html.xpath(current_xpath)[0], html.xpath(xpath_list[-1])[0].tag,
                        current_xpath, xpath_list)
                else:
                    debug_log('=' * 40 + "e" * 10 + '=' * 40)
                    debug_log("xpath_list".ljust(30) + ':' + ','.join(xpath_list))
                    current_xpath = prev_xpath + '/' + target_element_tag
                    xpath_list.append(current_xpath)
                    debug_log(current_xpath)


def wrapper_execute(local_file_url, *debug_flg):

    global is_debug

    with open(local_file_url, 'r') as f:
        data = f.read()

        doc = etree.HTML(data)

        html = lxml.html.fromstring(data)

        xpath_list = list()
        prev_target_element_tag = doc.tag
        prev_xpath = '/' + prev_target_element_tag
        xpath_list.append(prev_xpath)

        is_debug = debug_flg

        # 元ネタは持ち回る必要がある
        NNN(html, doc, prev_target_element_tag, prev_xpath, xpath_list)


def main():
    try:
        if (len(sys.argv[1:])) == 0:
            # パイプ経由引数の場合
            args_via_pipe = sum(list(map(lambda x: x.strip().split(), sys.stdin.readlines())), [])

            if not len(args_via_pipe) <= 2:
                usage()

            if len(args_via_pipe) == 2:

                file_name = args_via_pipe[0]
                debug_flg = args_via_pipe[1]

                # 前回分の出力結果ファイルが存在すれば削除
                if not os.path.exists(file_name):
                    usage()

                if not debug_flg == '--debug':
                    usage()

                wrapper_execute(file_name, 1)

            elif len(args_via_pipe) == 1:

                file_name = args_via_pipe[0]

                # 前回分の出力結果ファイルが存在すれば削除
                if not os.path.exists(file_name):
                    usage()

                wrapper_execute(file_name)
            else:
                usage()

        else:
            # コマンドライン経由引数の場合
            usage()

    except KeyboardInterrupt:
        usage()


if __name__ == "__main__":
    main()

